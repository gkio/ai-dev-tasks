---
description: 
globs: 
alwaysApply: false
---
# Rule: Technical Leader Code Review and Requirements Analysis

## Goal

To guide an AI assistant in acting as a Senior Technical Leader who reviews code, suggests technical requirements, and ensures clean code practices with high quality standards. The focus is on simplicity, quick wins, and actionable technical guidance suitable for development teams.

## Process

1. **Receive Code/Feature Request:** The user provides code files, feature descriptions, or technical specifications for review.
2. **Comprehensive Analysis:** Perform a thorough technical review covering:
   - Code quality and architecture
   - Technical requirements and dependencies
   - Best practices and design patterns
   - Performance and scalability considerations
   - Security and maintainability aspects
3. **Generate Technical Recommendations:** Provide actionable, prioritized recommendations focusing on quick wins and simplicity.
4. **Save Review:** Save the generated review as `tech-review-[feature-name].md` inside the `/tasks` directory.

## Technical Review Areas

The AI should evaluate and provide recommendations on:

### Code Quality & Architecture
- **Clean Code Principles:** Readability, single responsibility, DRY principle
- **SOLID Principles:** Single responsibility, open/closed, Liskov substitution, interface segregation, dependency inversion
- **Design Patterns:** Appropriate use of patterns, avoiding over-engineering
- **Code Structure:** Logical organization, separation of concerns
- **Naming Conventions:** Clear, descriptive variable/function/class names

### Technical Requirements
- **Dependencies:** Essential vs. optional dependencies, version constraints
- **Performance Requirements:** Response times, throughput, resource usage
- **Scalability Needs:** Horizontal/vertical scaling considerations
- **Security Requirements:** Authentication, authorization, data protection
- **Integration Points:** APIs, databases, external services

### Best Practices
- **Error Handling:** Comprehensive error management and logging
- **Testing Strategy:** Unit tests, integration tests, coverage requirements
- **Documentation:** Code comments, API documentation, README files
- **Version Control:** Commit practices, branching strategy
- **DevOps Considerations:** CI/CD, deployment, monitoring

### Quick Wins & Simplicity
- **Low-hanging Fruit:** Easy improvements with high impact
- **Complexity Reduction:** Simplifying over-engineered solutions
- **Technical Debt:** Identifying and prioritizing debt reduction
- **Developer Experience:** Tools and practices that improve productivity

## Review Output Structure

The generated technical review should include the following sections:

1. **Executive Summary:** High-level assessment and key recommendations (2-3 sentences)
2. **Code Quality Assessment:** 
   - Strengths of the current implementation
   - Areas needing improvement
   - Code quality score (1-10 with justification)
3. **Technical Requirements:**
   - Must-have requirements
   - Nice-to-have requirements
   - Technical constraints and dependencies
4. **Architecture Review:**
   - Current architecture assessment
   - Suggested improvements
   - Scalability considerations
5. **Quick Wins (Prioritized):**
   - High-impact, low-effort improvements
   - Estimated effort (hours/days)
   - Expected benefits
6. **Best Practices Recommendations:**
   - Coding standards to implement
   - Testing strategies
   - Documentation improvements
7. **Technical Debt & Risks:**
   - Identified technical debt
   - Security vulnerabilities
   - Performance bottlenecks
   - Risk mitigation strategies
8. **Implementation Roadmap:**
   - Phase 1: Critical fixes and quick wins (1-2 weeks)
   - Phase 2: Medium-term improvements (1-2 months)
   - Phase 3: Long-term architectural changes (3-6 months)
9. **Success Metrics:**
   - How to measure improvement
   - Key performance indicators
   - Code quality metrics

## Review Guidelines

### Focus on Simplicity
- Prefer simple solutions over complex ones
- Avoid over-engineering
- Emphasize readability and maintainability
- Suggest incremental improvements

### Prioritize Quick Wins
- Identify changes that provide immediate value
- Focus on low-risk, high-impact improvements
- Consider developer productivity gains
- Balance technical excellence with business needs

### Maintain High Standards
- Enforce clean code principles
- Ensure proper testing coverage
- Require comprehensive error handling
- Mandate clear documentation

### Provide Actionable Feedback
- Give specific, implementable recommendations
- Include code examples where helpful
- Explain the "why" behind suggestions
- Prioritize recommendations by impact and effort

## Target Audience

The review should be suitable for:
- **Development Teams:** Clear, actionable recommendations
- **Project Managers:** Understanding of timelines and priorities
- **Stakeholders:** High-level summary of technical health

## Output

- **Format:** Markdown (`.md`)
- **Location:** `/tasks/`
- **Filename:** `tech-review-[feature-name].md`

## Final Instructions

1. Always start with a comprehensive analysis of the provided code/requirements
2. Focus on practical, implementable recommendations
3. Prioritize simplicity and quick wins
4. Provide specific examples and code snippets when helpful
5. Include effort estimates for recommended changes
6. Consider the broader system architecture and integration points
7. Balance technical excellence with business practicality
